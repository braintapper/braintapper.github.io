[
  {
    "title": "Check out my Articles",
    "tags": null,
    "publish_date": "2020-01-06 12:02",
    "updated_date": null,
    "featured": false,
    "author": "Steven Ng",
    "__content": "\r\nAs mentioned in my first post, I have an [Articles](/articles) section on the site where I'll be posting evergreen articles that will continue to be updated over time.\r\n\r\nI have two articles in place now:\r\n\r\n1. [The Windows Software I use to Stay Productive](/articles/my-favorite-self-hosted-apps) - This is a list of software that I recommend for Windows users.\r\n2. [My Favorite Self-Hosted Applications](/articles/useful-windows-apps) - This is a list of mostly Docker containers (for now) that I recommend running in your own environment.\r\n\r\nI have a queue of other useful articles on their way, and will announce their creation or updates here on the blog.\r\n",
    "html": "<p>As mentioned in my first post, I have an <a href=\"/articles\">Articles</a> section on the site where I&#39;ll be posting evergreen articles that will continue to be updated over time.</p>\n<p>I have two articles in place now:</p>\n<ol>\n<li><a href=\"/articles/my-favorite-self-hosted-apps\">The Windows Software I use to Stay Productive</a> - This is a list of software that I recommend for Windows users.</li>\n<li><a href=\"/articles/useful-windows-apps\">My Favorite Self-Hosted Applications</a> - This is a list of mostly Docker containers (for now) that I recommend running in your own environment.</li>\n</ol>\n<p>I have a queue of other useful articles on their way, and will announce their creation or updates here on the blog.</p>\n",
    "timestamp": "2020-01-06T17:02:00.000Z",
    "year": 2020,
    "month": 1,
    "month_name": "January",
    "day": 6,
    "slug": "check-out-my-articles-section"
  },
  {
    "title": "Convert an Outlook PST to JSON",
    "tags": null,
    "publish_date": "2020-01-06 12:00",
    "updated_date": null,
    "featured": false,
    "author": "Steven Ng",
    "__content": "\r\nI had to archive an Outlook mailbox to a PST file recently, but I'm not a huge fan of using Outlook for finding e-mails.\r\n\r\nI looked around for tools that would convert a PST to JSON so I could load my data into something like Postgresql, but I didn't\r\nfind anything that was free (I only need to do the conversion once).\r\n\r\nI ended up searching for an NPM that could extract objects from a PST, and found [epfromer's pst-extractor.](https://github.com/epfromer/pst-extractor).\r\n\r\nUsing that NPM, I made a simple command line tool for Windows that can extract a PST into a JSON file.\r\n\r\nSince my requirements were modest (one time use, reasonably sized PST file), I didn't really design it to scale.\r\nIt doesn't support password protected PSTs, and I can't guarantee that it will run on a giant PST file if your machine doesn't have enough memory, but\r\nit's there if you need the functionality.\r\n\r\nTo use it, just download the [executable from Github](https://github.com/braintapper/pst_to_json/releases).\r\n\r\nThe command structure is pretty straightforward. From the directory of the executable, use:\r\n\r\n```\r\npst_to_json -s /path/to/file.pst -d /path/to/output.json\r\n```\r\n\r\nThere are some [additional switches](https://github.com/braintapper/pst_to_json/blob/master/readme.md), but the above command is all you need to accomplish the task.\r\n",
    "html": "<p>I had to archive an Outlook mailbox to a PST file recently, but I&#39;m not a huge fan of using Outlook for finding e-mails.</p>\n<p>I looked around for tools that would convert a PST to JSON so I could load my data into something like Postgresql, but I didn&#39;t\nfind anything that was free (I only need to do the conversion once).</p>\n<p>I ended up searching for an NPM that could extract objects from a PST, and found <a href=\"https://github.com/epfromer/pst-extractor\">epfromer&#39;s pst-extractor.</a>.</p>\n<p>Using that NPM, I made a simple command line tool for Windows that can extract a PST into a JSON file.</p>\n<p>Since my requirements were modest (one time use, reasonably sized PST file), I didn&#39;t really design it to scale.\nIt doesn&#39;t support password protected PSTs, and I can&#39;t guarantee that it will run on a giant PST file if your machine doesn&#39;t have enough memory, but\nit&#39;s there if you need the functionality.</p>\n<p>To use it, just download the <a href=\"https://github.com/braintapper/pst_to_json/releases\">executable from Github</a>.</p>\n<p>The command structure is pretty straightforward. From the directory of the executable, use:</p>\n<pre><code>pst_to_json -s /path/to/file.pst -d /path/to/output.json</code></pre><p>There are some <a href=\"https://github.com/braintapper/pst_to_json/blob/master/readme.md\">additional switches</a>, but the above command is all you need to accomplish the task.</p>\n",
    "timestamp": "2020-01-06T17:00:00.000Z",
    "year": 2020,
    "month": 1,
    "month_name": "January",
    "day": 6,
    "slug": "converting-an-outlook-pst-to-json"
  },
  {
    "title": "So I Wrote a Database Migrations NPM",
    "tags": null,
    "publish_date": "2019-12-30 12:00",
    "updated_date": null,
    "featured": false,
    "author": "Steven Ng",
    "__content": "\r\nI've been working on making Docker containers of my personal Nodejs projects lately, and for those that rely on a relational database (namely Postgresql), I wanted to be able to run [database migrations](https://en.wikipedia.org/wiki/Schema_migration) on them locally to make updates easier. To be clear, I'm not talking about [data migrations](https://en.wikipedia.org/wiki/Data_migration), which are a completely different thing.\r\n\r\nFor database migrations outside of Ruby on Rails, I've been using [Liquibase](http://www.liquibase.org/), and more recently, [Flyway](https://flywaydb.org/). They're both perfectly fine tools, but they also require Java, which means one may need to [consider the implications of how Java licenses work](https://www.itjungle.com/2019/04/03/ibm-clarifies-java-options-following-oracle-license-crackdown/).\r\n\r\nAs it relates to migrations, I subscribe to the [forward migrations only philosophy](https://nickcraver.com/blog/2016/05/03/stack-overflow-how-we-do-deployment-2016-edition/#database-migrations), which means my requirements are relatively simple. All I need to do is scan a pre-specified directory of SQL files and run only the new SQL files. The onus is on me for providing clean, error-free SQL files, so I don't need to make a migration tool very smart.\r\n\r\nI did look at existing libraries on NPMJS, but I didn't see any having a workflow similar to Flyway, which has been my tool of choice.\r\n\r\nYou might be getting the impression that I suffer from [NIH (Not Invented Here) syndrome](https://en.wikipedia.org/wiki/Not_invented_here), and you could be right. But my experience with some software is that there are always some elements that I find incredibly frustrating or incompatible with the way I work, and I end up spending significantly more time working around those issues than I would have if I had just written something from scratch.\r\n\r\nMy NPM, named [pg-forward-migrations](https://github.com/braintapper/pg-forward-migrations) is designed to do one very specific task well, and took a few hours to write. I spent more time figuring out how to use Liquibase the first time I used it, so in this particular case, the NIH concern is a wash.\r\n\r\nAll this NPM does is run sequence of SQL statements against a Postgresql database. The workflow is inspired by Flyway in that it uses an easy-to-remember naming convention, and it tracks completed migrations by writing to a migration table in the target database. That's it. It's not rocket science, nor is it attempting to be a replacement for a multi-platform, enterprise-class database migration tool.\r\n\r\nAt some point, I will probably use this NPM to create command line executable, but at the moment, it's not a priority.\r\n\r\nIn any case, if you've got a need for a forward migration tool for Postgresql/Node, give the NPM a whirl.\r\n",
    "html": "<p>I&#39;ve been working on making Docker containers of my personal Nodejs projects lately, and for those that rely on a relational database (namely Postgresql), I wanted to be able to run <a href=\"https://en.wikipedia.org/wiki/Schema_migration\">database migrations</a> on them locally to make updates easier. To be clear, I&#39;m not talking about <a href=\"https://en.wikipedia.org/wiki/Data_migration\">data migrations</a>, which are a completely different thing.</p>\n<p>For database migrations outside of Ruby on Rails, I&#39;ve been using <a href=\"http://www.liquibase.org/\">Liquibase</a>, and more recently, <a href=\"https://flywaydb.org/\">Flyway</a>. They&#39;re both perfectly fine tools, but they also require Java, which means one may need to <a href=\"https://www.itjungle.com/2019/04/03/ibm-clarifies-java-options-following-oracle-license-crackdown/\">consider the implications of how Java licenses work</a>.</p>\n<p>As it relates to migrations, I subscribe to the <a href=\"https://nickcraver.com/blog/2016/05/03/stack-overflow-how-we-do-deployment-2016-edition/#database-migrations\">forward migrations only philosophy</a>, which means my requirements are relatively simple. All I need to do is scan a pre-specified directory of SQL files and run only the new SQL files. The onus is on me for providing clean, error-free SQL files, so I don&#39;t need to make a migration tool very smart.</p>\n<p>I did look at existing libraries on NPMJS, but I didn&#39;t see any having a workflow similar to Flyway, which has been my tool of choice.</p>\n<p>You might be getting the impression that I suffer from <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\">NIH (Not Invented Here) syndrome</a>, and you could be right. But my experience with some software is that there are always some elements that I find incredibly frustrating or incompatible with the way I work, and I end up spending significantly more time working around those issues than I would have if I had just written something from scratch.</p>\n<p>My NPM, named <a href=\"https://github.com/braintapper/pg-forward-migrations\">pg-forward-migrations</a> is designed to do one very specific task well, and took a few hours to write. I spent more time figuring out how to use Liquibase the first time I used it, so in this particular case, the NIH concern is a wash.</p>\n<p>All this NPM does is run sequence of SQL statements against a Postgresql database. The workflow is inspired by Flyway in that it uses an easy-to-remember naming convention, and it tracks completed migrations by writing to a migration table in the target database. That&#39;s it. It&#39;s not rocket science, nor is it attempting to be a replacement for a multi-platform, enterprise-class database migration tool.</p>\n<p>At some point, I will probably use this NPM to create command line executable, but at the moment, it&#39;s not a priority.</p>\n<p>In any case, if you&#39;ve got a need for a forward migration tool for Postgresql/Node, give the NPM a whirl.</p>\n",
    "timestamp": "2019-12-30T17:00:00.000Z",
    "year": 2019,
    "month": 12,
    "month_name": "December",
    "day": 30,
    "slug": "pg-forward-migrations"
  },
  {
    "title": "Welcome to the New Site",
    "tags": null,
    "publish_date": "2019-12-29 12:00",
    "updated_date": null,
    "featured": false,
    "author": "Steven Ng",
    "__content": "\r\n\r\nWell it's been a while since the site has been updated. A *long* while, actually.\r\n\r\nIt's been a long time coming, but I forced myself over the holidays to revamp the site, and here it is.\r\n\r\nThings are going to be rough for a little while, as this is a work in progress, and I've opted to go live with a buggy site as opposed to leaving a placeholder page up. This should force me to iterate more quickly and more often.\r\n\r\nSo before I rebuilt the site, I went through a lot of hand-wringing deciding how to publish this site.\r\n\r\nShould I use a static generator like Jekyll? A GUI type tool like MarsEdit? Should I write my own tool? Wordpress (no f-ing way)? A hosted site like Squarespace?\r\n\r\nI ended up choosing a hodgepodge of [Svelte](https://svelte.dev/) and [Sapper](https://sapper.svelte.dev/), with some preprocessing using [Gulp](https://gulpjs.com/). I've already been immersing myself in Svelte for the past couple of months, so I figured I may as well stick with that for my site too. Once the site is somewhat stable, I'll try to write up a blog post on what I do to build this site. TLDR; I basically write my content as markdown posts, and have a script to process them into something consumable for my Svelte app.\r\n\r\nThe site's main focus is the blog, but I will have some evergreen content in the form of [articles](/articles) that can help boost your productivity. I plan to publish my list of \"must have\" software and services, among other things.\r\n\r\nThe blog will be mostly made up of a hodgepodge of technical topics, ranging from Cognos, Node, Database and other topics that I find interesting.\r\n\r\nIn the meantime, click on the RSS link at the top of the page to keep up with my new content.\r\n\r\nCheers!\r\n",
    "html": "<p>Well it&#39;s been a while since the site has been updated. A <em>long</em> while, actually.</p>\n<p>It&#39;s been a long time coming, but I forced myself over the holidays to revamp the site, and here it is.</p>\n<p>Things are going to be rough for a little while, as this is a work in progress, and I&#39;ve opted to go live with a buggy site as opposed to leaving a placeholder page up. This should force me to iterate more quickly and more often.</p>\n<p>So before I rebuilt the site, I went through a lot of hand-wringing deciding how to publish this site.</p>\n<p>Should I use a static generator like Jekyll? A GUI type tool like MarsEdit? Should I write my own tool? Wordpress (no f-ing way)? A hosted site like Squarespace?</p>\n<p>I ended up choosing a hodgepodge of <a href=\"https://svelte.dev/\">Svelte</a> and <a href=\"https://sapper.svelte.dev/\">Sapper</a>, with some preprocessing using <a href=\"https://gulpjs.com/\">Gulp</a>. I&#39;ve already been immersing myself in Svelte for the past couple of months, so I figured I may as well stick with that for my site too. Once the site is somewhat stable, I&#39;ll try to write up a blog post on what I do to build this site. TLDR; I basically write my content as markdown posts, and have a script to process them into something consumable for my Svelte app.</p>\n<p>The site&#39;s main focus is the blog, but I will have some evergreen content in the form of <a href=\"/articles\">articles</a> that can help boost your productivity. I plan to publish my list of &quot;must have&quot; software and services, among other things.</p>\n<p>The blog will be mostly made up of a hodgepodge of technical topics, ranging from Cognos, Node, Database and other topics that I find interesting.</p>\n<p>In the meantime, click on the RSS link at the top of the page to keep up with my new content.</p>\n<p>Cheers!</p>\n",
    "timestamp": "2019-12-29T17:00:00.000Z",
    "year": 2019,
    "month": 12,
    "month_name": "December",
    "day": 29,
    "slug": "welcome-to-the-new-site"
  }
]
